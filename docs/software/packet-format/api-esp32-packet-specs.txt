The following document describes the packets used in the communication between the ESP32 and the Web API

1. Communications Packet Description

A packet has the following format:

type    |  Field name              |  Size in bytes  |  Significance
========+==========================+=================+=======================================================================
byte[]  |  Signature               |  8              |  Always fixed for valid packets
ulong   |  SentAt                  |  8              |  Unix timestamp for the time the packet was created and sent
byte[]  |  PacketIdentifier        |  16             |  A unique, randomly generated identifier for the packet. Used in ACKs
byte[]  |  AuthorizationToken      |  16             |  Used to authenticate and authorize the ESP32
uint    |  PacketType              |  4              |  Densotes packet type
uint    |  PacketError             |  4              |  Denotes packet error
uint    |  PacketEncryptionMethod  |  4              |  Encryption methohd used in the packet
uint    |  DataSize                |  4              |  Size of following data in bytes
byte[]  |  EncryptedData           |  DataSize       |  Payload of the packet
byte[]  |  PacketSignature         |  32             |  The HMAC SHA256 signature of the packet.

2. Field specifications for The Communications Packet

2.1 Signature

The signature is always the following byte sequence:
0x01, 0x10, 'e', 's', 'p', 'c', 'o', 'm' 

2.2 SentAt

This field is the time at which the packet is created and sent, it is a unix timestamp meaning it is the seconds that have elapsed since 1 Jan 1970

2.3 PacketIdentifier

This field must be a globally unique identifier. It should be generated randomly. It is used to acknowledge packets.

2.4 AuthorizationToken

This is a unique randomly generated byte sequence associated with a device client. It has to be sent with every message that is not a Register or Auth Packet.

2.5 PacketType

A packet can have the following types with the following values of PacketType:

0 = Ack,                 : Acknowledges a request or response
1 = Register,            : Initiates client registration
2 = Auth,                : Authorizes a client by returning an AuthorizationToken
3 = RevokeAuth,          : Revokes a AuthorizationToken
4 = Data,                : A packet containing a payload that needs further parsing
5 = Error                : An error packet

2.6 PacketError

A packet can have the following errors with the following values of PacketError:

0 = None,                : No error
1 = MalformedPacket,     : Packet has invalid fields or does not have all required fields or it is shorter than it is supposed to be
2 = InvalidPacket,       : Packet has all required fields but the data contained within the fields is faulty.
3 = InternalError        : Packet is correct in the way that it represents information but it has caused a internal error

2.7 PacketEncryptionMethod

This field only has 2 valid values:

0 = None,
1 = AES

2.8 DataSize    

This field is the size of the EncryptedData field in bytes

2.9 EncryptedData

The existence and format of this data depends on the packet type. The packet types (Data) and (Auth) and (Register) always include a data section.
If the EncryptionMethod is None, this is in normal data format. If the EncryptionMethod is AES, this data has to be decrypted before parsing.

2.10 PacketSignature

This field is a HMAC SHA256 of the packet. It should always be checked and validated on every packet transmission
